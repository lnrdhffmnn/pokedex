---
import Layout from "@/layouts/layout.astro";
import Card from "@/components/card.astro";
import type { GetStaticPaths, Page } from "astro";
import type { Pokemon } from "@/types";
import LinkButton from "@/components/link-button.astro";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const res = await fetch(
    "https://pokeapi.co/api/v2/pokemon?limit=100000&offset=0"
  );
  const json = await res.json();
  const results: { url: string }[] = json.results;

  return paginate(
    results.map(result => result.url),
    { pageSize: 40 }
  );
};

export interface Props {
  page: Page<string>;
}

const { page } = Astro.props;

const promises: Promise<any>[] = page.data.map(url =>
  fetch(url).then(res => res.json())
);
const resolvedPromises = await Promise.all(promises);
const pokemons: Pokemon[] = resolvedPromises
  .map(pokemon => ({
    name: pokemon.name,
    image:
      pokemon.sprites.other["official-artwork"].front_default ??
      pokemon.sprites.front_default,
  }))
  .filter(pokemon => pokemon.name && pokemon.image);
---

<Layout>
  <div
    class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"
  >
    {pokemons.map(pokemon => <Card pokemon={pokemon} />)}
  </div>
  <div class="w-full flex items-center justify-center gap-4 mt-4">
    {
      page.url.prev && (
        <LinkButton href={page.url.prev} label="Página anterior" />
      )
    }
    {
      page.url.next && (
        <LinkButton href={page.url.next} label="Próxima página" />
      )
    }
  </div>
</Layout>
